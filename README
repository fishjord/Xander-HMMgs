HMMgs:
	build - Build a De Bruijn graph from from a set of reads
	      java -jar hmmgs.jar build <read_file> <bloom_out> <kmerSize> <bloomSizeLog2> [# hashCount = 4] [bitsetSizeLog2]
	      	   <read_file> is a fasta file containing the reads to build the graph from
	      	   <bloom_out> is the file to write the bloom filter to
		   <kmerSize> word size
		   <bloomSizeLog2> log2 size of the bloom filter (bits), common sizes 30=128m 32 = 512m 34=1g, 38=32g
		   <hash count>, optional, number of hashes to use when building the bloom filter
		   <bitsetsetSizeLog2> optional, log2 size of individual bitsets used to store parts of the bloom filter (default = 32)
	search - Perform local assembly starting at the given start points in a given De Bruijn Graph output files <kmers>_nucl.fasta, _prot.fasta, search stats written to stdout
	       java -jar hmmgs.jar search <k> <limit_in_seconds> <bloom_filter> <for_hmm> <rev_hmm> <kmers> [threads=#processors]
	       	    <k> number of best local assemblies to return
		    <limit_in_seconds> time limit for individual searches (conservative suggestion = 30)
		    <bloom_filter> bloom filter built using hmmgs build
		    <for_hmm>, <rev_hmm> hidden markov models, HMMER3 format
		    <kmers> starting points (can use KmerFilter's fast_kmer_filter to identify starting points)
		    [#threads] experimental, suggested 1 (not thoroughly tested)
	merge - Merge the left and right contigs generated by hmmgs search
	      java -jar hmmgs.jar merge [options] <hmm> <hmmgs_file> <nucl_contig>
	      	    -b,--min-bits <arg>     Minimum bits score
		    -l,--min-length <arg>   Minimum length
		    -o,--out <arg>          Write output to file instead of stdout
KmerFilter:
	fast_kmer_filter - search a set of reads against a set of reference sequences for a gene of interest to identify potential starting points for local assembly
		java -jar dist/lib/KmerFilter.jar fast_kmer_filter <word_size> <query_file> [name=]<ref_file> ...
		     <word_size> kmer length
		     <query_file> read file to search for starting points in (use the same fasta file used to build the De Bruijn Graph)
		     1 or more aligned reference files (aligned using the same HMM that will be used to search) with an optional reference name (ie nifh=my_nifh_refs_aligned.fasta)

Per Gene Preparation:
    Reference Set Selection - Select a set of reference sequences (resouce: http://fungene.cme.msu.edu/) representative of the gene of interest.  More diversity is better, more sequences means more starting points (more computational time) but less suceptiable to noise than model creation.
    Model Construction - HMMs can be built using HMMER3 (models are expected to be in HMMER3/b format).  A forward and reverse model (left and right) must be built.  The reverse model is built simply by reversing the seed alignment and running hmmbuild again.

Using HMMgs:
      0. Perform the preparation steps for each gene of interest
      1. (both steps are independent and can be done in parallel)
         a. Construct the bloom filter from reads
         b. Search for starting points in reads
      2. Use HMMgs to perform local assembly
      3. Perform down stream analysis (on individual contigs, or after merging)

Other uses:
     HMMgs can also be used to extract subgraphs from starting points instead of contigs to perform further analysis with (see edu.msu.cme.rdp.graph.GraphSearch)
     HMMgs can also be used to compute base coverage for contigs (generated by hmmgs or other programs) (see edu.msu.cme.rdp.graph.abundance.ReadKmerMapper and base_coverage.py)

NOTES:
     When using fast_kmer_filter to identify start points there are two things to be aware of.
       1. While the Bloom Filter Builder allows any k-size (hmmgs requiers a k divisible by 3 however), fast_kmer_filter requires k <= 30
       2. fast_kmer_filter allows for multiple gene starting points to be searched for at the same time (since each requires a scan over the read file it is faster to do every gene at once), however this means the output file is multiplexed and must be demultiplexed before used in hmmgs search.  This can be done with the following command: grep 'gene_name' <multiplexed_starts_file> | cut -f2- > <demultiplexed_gene_start_points>
